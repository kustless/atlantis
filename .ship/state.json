{
  "v1": {
    "config": null,
    "helmValues": "## -------------------------- ##\n# Values to override for your instance.\n## -------------------------- ##\n\n## An option to override the atlantis url,\n##   if not using an ingress, set it to the external IP.\n# atlantisUrl: http://10.0.0.0\n\n# Replace this with your own repo whitelist:\norgWhitelist: \u003creplace-me\u003e\n# logLevel: \"debug\"\n\n# If using GitHub, specify like the following:\n# github:\n#   user: foo\n#   token: bar\n#   secret: baz\n# GitHub Enterprise only:\n#   hostname: github.your.org\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n# If using GitLab, specify like the following:\n# gitlab:\n#   user: foo\n#   token: bar\n#   secret: baz\n# GitLab Enterprise only:\n#   hostname: gitlab.your.org\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n# If using Bitbucket, specify like the following:\n# bitbucket:\n#   user: foo\n#   token: bar\n# Bitbucket Server only:\n#   secret: baz\n#   base_url: https://bitbucket.yourorganization.com\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n\n# When referencing Terraform modules in private repositories, it may be helpful\n# (necessary?) to use redirection in a .gitconfig like so:\n# gitconfig: |\n  # [url \"https://YOUR_GH_TOKEN@github.com\"]\n  #   insteadOf = https://github.com\n  # [url \"https://YOUR_GH_TOKEN@github.com\"]\n  #   insteadOf = ssh://git@github.com\n  # [url \"https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com\"]\n  #   insteadOf = https://gitlab.com\n  # [url \"https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com\"]\n  #   insteadOf = ssh://git@gitlab.com\n# Source: https://stackoverflow.com/questions/42148841/github-clone-with-oauth-access-token\n\n# To specify AWS credentials to be mapped to ~/.aws:\n# aws:\n#   credentials: |\n#     [default]\n#     aws_access_key_id=YOUR_ACCESS_KEY_ID\n#     aws_secret_access_key=YOUR_SECRET_ACCESS_KEY\n#     region=us-east-1\n#   config: |\n#     [profile a_role_to_assume]\n#     role_arn = arn:aws:iam::123456789:role/service-role/roleToAssume\n#     source_profile = default\n\n## To be used for mounting credential files (when using google provider).\nserviceAccountSecrets:\n  # credentials: \u003cjson file as base64 encoded string\u003e\n  # credentials-staging: \u003cjson file as base64 encoded string\u003e\n\n\n## -------------------------- ##\n# Default values for atlantis (override as needed).\n## -------------------------- ##\n\nimage:\n  repository: runatlantis/atlantis\n  tag: v0.6.0\n  pullPolicy: IfNotPresent\n\n## Optionally specify an array of imagePullSecrets.\n## Secrets must be manually created in the namespace.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n##\n# imagePullSecrets:\n# - myRegistryKeySecretName\n\n## enable using atlantis.yaml file\nallowRepoConfig: false\n\n# Require all pull requests be approved prior to apply.\nrequireApproval: false\n\n# Require all pull requests to meet repository mergeability requirements prior to apply.\nrequireMergeable: false\n\n# We only need to check every 60s since Atlantis is not a high-throughput service.\nlivenessProbe:\n  enabled: true\n  periodSeconds: 60\n  initialDelaySeconds: 5\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 5\n  scheme: HTTP\nreadinessProbe:\n  enabled: true\n  periodSeconds: 60\n  initialDelaySeconds: 5\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 5\n  scheme: HTTP\n\nservice:\n  type: NodePort\n  port: 80\n\npodTemplate:\n  annotations: {}\n    # kube2iam example:\n    # iam.amazonaws.com/role: role-arn\n\nstatefulSet:\n  annotations: {}\n\ningress:\n  enabled: true\n  annotations: {}\n    # kubernetes.io/ingress.class: nginx\n    # kubernetes.io/tls-acme: \"true\"\n  path: /\n  host: chart-example.local\n  tls: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nresources:\n  requests:\n    memory: 1Gi\n    cpu: 100m\n  limits:\n    memory: 1Gi\n    cpu: 100m\n\n# Disk space for Atlantis to check out repositories\ndataStorage: 5Gi\n\nreplicaCount: 1\n\n## test container details\ntest:\n  image: lachlanevenson/k8s-kubectl\n  imageTag: v1.4.8-bash\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n\n# tlsSecretName: tls\n",
    "releaseName": "atlantis",
    "helmValuesDefaults": "## -------------------------- ##\n# Values to override for your instance.\n## -------------------------- ##\n\n## An option to override the atlantis url,\n##   if not using an ingress, set it to the external IP.\n# atlantisUrl: http://10.0.0.0\n\n# Replace this with your own repo whitelist:\norgWhitelist: \u003creplace-me\u003e\n# logLevel: \"debug\"\n\n# If using GitHub, specify like the following:\n# github:\n#   user: foo\n#   token: bar\n#   secret: baz\n# GitHub Enterprise only:\n#   hostname: github.your.org\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n# If using GitLab, specify like the following:\n# gitlab:\n#   user: foo\n#   token: bar\n#   secret: baz\n# GitLab Enterprise only:\n#   hostname: gitlab.your.org\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n# If using Bitbucket, specify like the following:\n# bitbucket:\n#   user: foo\n#   token: bar\n# Bitbucket Server only:\n#   secret: baz\n#   base_url: https://bitbucket.yourorganization.com\n# (The chart will perform the base64 encoding for you for values that are stored in secrets.)\n\n\n# When referencing Terraform modules in private repositories, it may be helpful\n# (necessary?) to use redirection in a .gitconfig like so:\n# gitconfig: |\n  # [url \"https://YOUR_GH_TOKEN@github.com\"]\n  #   insteadOf = https://github.com\n  # [url \"https://YOUR_GH_TOKEN@github.com\"]\n  #   insteadOf = ssh://git@github.com\n  # [url \"https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com\"]\n  #   insteadOf = https://gitlab.com\n  # [url \"https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com\"]\n  #   insteadOf = ssh://git@gitlab.com\n# Source: https://stackoverflow.com/questions/42148841/github-clone-with-oauth-access-token\n\n# To specify AWS credentials to be mapped to ~/.aws:\n# aws:\n#   credentials: |\n#     [default]\n#     aws_access_key_id=YOUR_ACCESS_KEY_ID\n#     aws_secret_access_key=YOUR_SECRET_ACCESS_KEY\n#     region=us-east-1\n#   config: |\n#     [profile a_role_to_assume]\n#     role_arn = arn:aws:iam::123456789:role/service-role/roleToAssume\n#     source_profile = default\n\n## To be used for mounting credential files (when using google provider).\nserviceAccountSecrets:\n  # credentials: \u003cjson file as base64 encoded string\u003e\n  # credentials-staging: \u003cjson file as base64 encoded string\u003e\n\n\n## -------------------------- ##\n# Default values for atlantis (override as needed).\n## -------------------------- ##\n\nimage:\n  repository: runatlantis/atlantis\n  tag: v0.6.0\n  pullPolicy: IfNotPresent\n\n## Optionally specify an array of imagePullSecrets.\n## Secrets must be manually created in the namespace.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n##\n# imagePullSecrets:\n# - myRegistryKeySecretName\n\n## enable using atlantis.yaml file\nallowRepoConfig: false\n\n# Require all pull requests be approved prior to apply.\nrequireApproval: false\n\n# Require all pull requests to meet repository mergeability requirements prior to apply.\nrequireMergeable: false\n\n# We only need to check every 60s since Atlantis is not a high-throughput service.\nlivenessProbe:\n  enabled: true\n  periodSeconds: 60\n  initialDelaySeconds: 5\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 5\n  scheme: HTTP\nreadinessProbe:\n  enabled: true\n  periodSeconds: 60\n  initialDelaySeconds: 5\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 5\n  scheme: HTTP\n\nservice:\n  type: NodePort\n  port: 80\n\npodTemplate:\n  annotations: {}\n    # kube2iam example:\n    # iam.amazonaws.com/role: role-arn\n\nstatefulSet:\n  annotations: {}\n\ningress:\n  enabled: true\n  annotations: {}\n    # kubernetes.io/ingress.class: nginx\n    # kubernetes.io/tls-acme: \"true\"\n  path: /\n  host: chart-example.local\n  tls: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nresources:\n  requests:\n    memory: 1Gi\n    cpu: 100m\n  limits:\n    memory: 1Gi\n    cpu: 100m\n\n# Disk space for Atlantis to check out repositories\ndataStorage: 5Gi\n\nreplicaCount: 1\n\n## test container details\ntest:\n  image: lachlanevenson/k8s-kubectl\n  imageTag: v1.4.8-bash\n\nnodeSelector: {}\n\ntolerations: []\n\naffinity: {}\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n\n# tlsSecretName: tls\n",
    "upstream": "https://github.com/helm/charts/stable/atlantis",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://www.runatlantis.io/hero.png",
      "name": "atlantis",
      "releaseNotes": "Add anubhavmishra as owner of Atlantis chart (#12533)\n\nSigned-off-by: Luke Kysow \u003c1034429+lkysow@users.noreply.github.com\u003e",
      "version": "2.0.1"
    },
    "contentSHA": "c5ffdc27b9bdf3a35a1d09cefb28130a81ff2794010306ca665b2a05c62f1e9c",
    "lifecycle": {
      "stepsCompleted": {
        "intro": true,
        "kustomize": true,
        "kustomize-intro": true,
        "outro": true,
        "render": true,
        "values": true
      }
    }
  }
}